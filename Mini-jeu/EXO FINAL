GROS EXO DE FOU :

Nous allons créer un mini jeu en plusieurs étapes, nous allons tout découper en plusieurs taches pour que ce soit plus logique et facile a suivre !
Premierement nous allons récuperer ce bout de code et le mettre dans le <body> de notre site :

	<div id="contenu">
		<h1>Deviner un nombre</h1>
		<p>Devinez un nombre entre 1 et 100, vous avez 10 chances max.
		Pour chaque tentative nous vous dirons si votre estimation est trop ou pas assez élevée !</p>
		<input type="text" id="guessField" class="guessField">
		<input type="submit" value="Valider" class="guessSubmit">
		
		<div class="resultParas">
			<p class="guesses"></p>
			<p class="lastResult"></p>
			<p class="lowOrHi"></p>	
		</div>
	</div>

Notre jeu va générer un chiffre de 1 a 100, l'utilisateur auras 10 tentatives pour le deviner, a chaque tentative nous lui dirons si le chiffre est trop bas ou trop élevé

	Exemple : 
	Le chiffre généré est 45
	Si l'utilisateur met 23 nous lui dirons "Nombre trop bas"
	Si l'utilisateur met 67 nous lui dirons "Nombre trop élevé"

---------
ETAPE 1 :

Initialiser toutes les variables, nous voulons stocker dans des variables les différentes valeurs :

	UN CHIFFRE RANDOM
	-> Nous allons le générer grace a une fonction javascript
	LE SELECTEUR DE L'ELEMENT .guesses
	-> Un paragraphe dans lequel nous allons afficher le nombre de tentatives
	LE SELECTEUR DE L'ELEMENT .lastResult
	-> Un paragraphe dans lequel nous allons afficher le dernier chiffre tenté par l'utilisateur
	LE SELECTEUR DE L'ELEMENT .lowOrHi
	-> Le paragraphe dans lequel on afficheras si le numéro tenté est trop élevé ou trop bas
	LE SELECTEUR DE L'ELEMENT .guessSubmit
	-> Le bouton valider qui va déclencher l'évènement
	LE SELECTEUR DE L'ELEMENT .guessField
	-> Le champ dans lequel on récupère le chiffre rentré par l'utilisateur
	UNE VARIABLE guessCount (avec une valeur initiale de 1)
	-> Une variable pour compter les tentatives
	UNE VARIABLE resetButton (sans valeur initiale)
	-> Une variable pour reset le jeu

Pour générer le numéro Random, allez chercher comment fonctionne la fonction Math.floor et Math.random ;)

---------
ETAPE 2 :

Créer 3 fonctions vides et SANS ARGUMENTS :

	checkGuess()
	-> Celle ci sera la fonction qui calcule si le nombre de l'utilisateur est le bon ou pas

	gameOver()
	-> Celle ci "eteindras" le jeu si nous perdons

	resetGame()
	-> Celle ci nous permettras de refaire une partie après avoir perdu !

	Rajouter un "eventListener" sur le click du bouton "Valider"

---------
ETAPE 3 :

Nous allons coder la fonction checkGuess !
Nous allons procéder étapes par étapes, faites tout étape par étape et n'essayez pas d'aller trop vite, on met en place progressivement l'application.

1. Premièrement nous devons récupérer la valeur de guessField (le champ ou l'utilisateur essaye de deviner)

Si la valeur de guessCount = 1, nous modifions le texte du selecteur guesses pour afficher "Propositions présédentes" puis la valeur de la proposition de l'utilisateur

Exemple :

	Propositions précédentes : 67 (la valeur que l'utilisateur a rentré)

2. Ensuite nous allons tester le choix de l'utilisateur grace au selecteur userGuess.

Premièrement nous allons tester si ce numéro EST EGAL AU RESULTAT FINAL(a randomNumber)

Si oui 
	-> Afficher "bien joué" dans "lastResult"
	-> Vider le texte de la case "lowOrHi"
	-> lancer la fonction gameOver();

Ensuite nous allons tester si le nombre de tentatives (guessCount) est égal a 10

Si oui
	-> Afficher "Perdu" dans "lastResult"
	-> Lancer gameOver();

JUSQU'A PRESENT NOUS TESTONS SI L'UTILISATEUR A TROUVE LA BONNE REPONSE ET/OU SI L'UTILISATEUR A PERDU, LE PAS SUIVANT C'EST DE TESTER SI LE CHIFFRE EST TROP HAUT OU ELEVE

Donc nous allons mettre :

SINON
	-> Afficher "Faux" dans "lastResult"
	-> Changer le style du texte de "lastResult" en rouge
	-> TESTER SI userGUESS est inférieur a randomNumber
		-> SI OUI -> Afficher "nombre trop bas" dans "lowOrHi"
		-> SINON -> Afficher "nombre trop élevé" dans "lowOrHi"


A la fin de la fonction, a la fin des tests il faut :

-> Rajouter 1 a guessCount
-> Réinitialiser la valeur de guessField
-> Focus le champ guessField()

---------
ETAPE 4 :

LA FONCTION GAME OVER (beaucoup plus simple et courte que l'antérieur fonction)
Celle ci va juste griser des champs et changer des textes pour faire comprendre a l'utilisateur que la partie est finie.

Dans cette fonction il faut :

-> Disable le champ guessField
-> Disable le champ guessSubmit
-> Créer un élément 'button' qui s'appelle resetButton
-> Changer le texte du boutton a "Start again"
-> Append le bouton dans BODY
-> Rajouter un EventListener sur le bouton qui lance la fonction resetGame();

---------
ETAPE 5 :

La fonction resetGame()

Cette fonction remet en place le jeu pour que l'utilisateur fasse une nouvelle partie, Nous allons réinitialiser tout les éléments grâce a une boucle, enlever le bouton "Start Again", et réinitialiser les champs !

Dans cette fonctions nous devons :

-> Remettre guessCount a 1
-> Grace a un selecteur, selectionner tout les paragraphes de la page
-> Faire une boucle pour tout les paragraphes dans laquelle nous modifions le texte des paragraphes a "" (vide);
-> Enlever le bouton resetButton
-> Re activer le bouton guessField et changer sa valeur a ""
-> Focus le champ guessField
-> Re activer le bouton guessSubmit
-> Re générer un nombre random dans randomNumber

--------------
ETAPE FINALE :

Créer un eventListener sur le bouton guessSubmit, qui lanceras la fonction checkGuess !

SI TOUT EST BIEN FAIT VOUS DEVRIEZ POUVOIR FAIRE FONCTIONNER LE JEU
L'IDEE ETANT DE PROCEDER ETAPE PAR ETAPE, ET DE TESTER CHAQUE ETAPE AVANT DE PASSER A LA SUIVANTE, LE PROJET A L'AIR LONG MAIS EN FAISANT PETIT A PETIT SANS SE PRESSER ET SANS PANIQUER C'EST ASSEZ RAPIDE !


###########
# RENDU : #
###########

A RENDRE VENDREDI 05/02/2021 AVANT 12H30 !
SOIT SUR MICROSOFT TEAMS OU PAR MAIL : christophe.crognier@gmail.com	

