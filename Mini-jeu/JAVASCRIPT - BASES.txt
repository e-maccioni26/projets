JAVASCRIPT - BASES

############
1. VARIABLES

Les variables sont des "cases" dans lesquelles nous pouvons contenir des valeurs
(Ex : age = 18)

Les variables possèdent plusieurs types :

Numéros entiers (int) -> 12
Chaines de caracteres (string) -> "Hello"
Vrai/Faux (booléen) -> true/false


###############
2. LES TABLEAUX

Les tableaux sont globalement une liste de valeurs. Nous pouvons stocker des ensembles de valeurs dans un tableau, du style :

a. Les tableaux numériques

Chaque valeur du tableau possède aussi une valeur numérique QUI COMMENCE A 0 ! 
(Chris = 0, Jean = 1, Bob = 2);

	listeinvites = ["Chris", "Jean", "Bob"];

Si je veux afficher la valeur de "chris" :

	alert(listeinvites[0]);

b. Les tableaux associatifs

Le tableau associatif est un tableau qui peut sauvegarder des données sous le format de "clef/valeur".

	listePays = {
		nom: "France",
		capitale: "Paris"
	}

	listePays = {
		nom: "Allemagne",
		capitale: "Berlin"
	}

La valeur que l'on conserve est associée a une clef ("Allemagne" est associé a la clef "nom" du tableau)
Pour afficher cette valeur nous pouvons tout simplement faire :

alert(listePays["nom"])


####################################
3. LES INSTRUCTIONS / LES CONDITIONS

Nous pouvons tester les différentes valeurs (les variables) avec une série de tests, qui nous permettent d'agir différemment en fonction d'une valeur.

	let age = 24;

	if (age < 18) {
		alert("Tu es mineur");
	} else {
		alert("Tu es majeur");
	}

	Les différentes opérations que l'on peut faire :

	<	Inférieur à...
	>	Supérieur à...
	<=  Inférieur ou égal
	>=	Supérieur ou égal
	==	est égal à...
	!=	est différent de...


##############
4. LES BOUCLES

Les boucles permettent tout simplement d'effectuer plusieurs fois la même action sans trop se répéter dans le code.
Il y a différents types de boucles pour différents usages.

a. BOUCLE FOR

La boucle for permet assez simplement d'effectuer une suite d'action en fonction d'une condition, un peu a la if/else

Dans ce cas, nous voulons afficher "Présent" dans la console (grace a la fonction console.log()) pour chacun de nos élèves

	nombreEleves = 13

	for (let i=0; i < nombreEleves ; i++) {
		console.log("Present !");
	}

i est le compteur, a chaque fin de boucle
nous faisons i++, qui veut dire i = i + 1;
Donc a chaque passage dans la boucle, i S'INCREMENTE, pour arriver finalement a la fin de la boucle, lorsque i = 13.
A chaque passage dans la boucle, le navigateur execute le code a l'intérieur de la boucle, donc le résultat final est qu'on affiche 13 fois dans la console le message "présent"

b. BOUCLE FOR IN

La boucle for ... in permet de parcourir un tableau, plus efficace, nous permet d'executer le même bout de code mais pour chaque donnée d'un tableau.
Très utile lorsque l'on gère des utilisateurs/produits, ou des données en grande quantité !

	const utilisateurs = [
	    "Chris",
	    "Jean",
	    "Alice",
	]

	for (let i in utilisateurs) {
	    console.log("Bonjour " + utilisateurs[i]);
	}

c. BOUCLE WHILE

La boucle WHILE est plus "vague". Elle vérifie si une condition est vraie ou fausse. Si la condition est vraie, la machine continue a boucler, sinon, elle se stoppe. 
IL FAUT FAIRE ATTENTION -> Si la condition n'est JAMAIS fausse, la boucle ne s'arréteras jamais, c'est ce qu'on appelle une boucle infinie, et dans le cas d'un site web, ça se traduit par un freeze complet de la page web/de l'onglet du navigateur.

	let placesRestantes = 10;
	let nonInvites = 8;
	let invites = 0;
	
	while (placesRestantes > 0 && nonInvites > 0) {
		invites++;
		placesRestantes--;
		nonInvites--;
	}

	console.log(nonInvites);

TANT QU'IL RESTE DES PLACES, LA BOUCLE CONTINUE.
LORSQUE TOUT LES nonInvites SONT DEVENUS DES invites, la boucle s'arrète;


################
5. LES FONCTIONS

Les fonctions, comme le nom l'indique, sont des bouts de code spéciphique qui nous permet d'encapsuler une FONCTIONNALITE.
Dans une grosse application, nous allons créer toute une panoplie de fonctions, des bouts de code réutilisables, principalement pour garder le code organisé, cela nous sert aussi a réutiliser des portions de code, et s'épargner du travail.

Exemple, une fonction peut par exemple encapsuler un bout de code qui calcule le carré du nombre passé en paramètre !

	function carre(nombre) {
	  return nombre * nombre;
	}

	carre(4); 
	// Va nous renvoyer 16 !



####################
JAVASCRIPT ET LE WEB


1. Le DOM (Document Object Model)

Dans un premier temps, nous avons du code HTML/CSS
Celui ci est lu par le navigateur
Le navigateur modélise le DOM (créer un modèle virtuel de ce que seras la page)
Puis le navigateur l'affiche.

	document.querySelector('');

	-> Cette fonction nous permet de selectionner UN élément HTML selon le nom de sa balise

	document.querySelectorAll('');

	-> Cette fonction nous permet de selectionner TOUT les éléments HTML selon le nom de leur balise

	document.getElementsByClassName('');

	-> Cette fonction nous permet de selectionner un élément HTML selon le nom de sa classe CSS

	document.getElementById('');

	-> Cette fonction nous permet de selectionner un élément HTML selon le nom de l'ID de sa balise

	SELECTEUR.textContent

	-> Cette fonction nous permet de changer la valeur du texte d'un élément

	SELECTEUR.style.color

	-> Cette fonction nous permet de modifier une propriété CSS
	(ici l'exemple est la propriété color)
